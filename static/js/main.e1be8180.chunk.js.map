{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","input","setInput","modInput","setMod","JSON","parse","localStorage","getItem","vocList","setList","deleteWord","index","prevList","filter","_","i","toggle","display","document","getElementById","String","style","useEffect","setItem","stringify","className","onSubmit","e","preventDefault","indexOf","alert","sort","a","b","localeCompare","sensitivity","type","value","onChange","target","placeholder","required","length","map","word","key","onClick","modifyWord","id","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAqHeA,MAlHf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEcF,mBAAS,IAFvB,mBAENG,EAFM,KAEIC,EAFJ,OAGcJ,mBACzBK,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAJlC,mBAGNC,EAHM,KAGGC,EAHH,KAyBb,SAASC,EAAWC,GAClBF,GAAQ,SAAAG,GAAQ,OAAIA,EAASC,QAAO,SAACC,EAAGC,GAAJ,OAAUA,GAAKJ,QAmBrD,SAASK,EAAOL,GACd,IAAIM,EAAUC,SAASC,eAAe,SAAWC,OAAOT,IAAQU,MAC7DJ,QACY,QAAXA,EACFC,SAASC,eAAe,SAAWC,OAAOT,IAAQU,MAAMJ,QAAU,QAC9C,SAAXA,IACTC,SAASC,eAAe,SAAWC,OAAOT,IAAQU,MAAMJ,QAAU,QAItE,OAhDAK,qBAAU,WACRhB,aAAaiB,QAAQ,QAASnB,KAAKoB,UAAUhB,MAC5C,CAACA,IA+CF,yBAAKiB,UAAU,OACb,4BAAQA,UAAU,cAChB,8DAEF,0BAAMC,SAjDV,SAAiBC,GAEf,GADAA,EAAEC,iBACEpB,EAAQqB,QAAQ7B,IAAU,EAC5B,OAAO8B,MAAM,IAAD,OAAK9B,EAAL,wCAEZS,GAAQ,SAAAG,GAAQ,MACd,sBAAIA,GAAJ,CAAcZ,IAAO+B,MAAK,SAACC,EAAGC,GAAJ,OACxBD,EAAEE,cAAcD,EAAG,KAAM,CAAEE,YAAa,eAI9ClC,EAAS,KAsCkBwB,UAAU,YACjC,2BACEA,UAAU,UACVW,KAAK,OACLC,MAAOrC,EACPsC,SAAU,SAAAX,GAAC,OAAI1B,EAAS0B,EAAEY,OAAOF,QACjCG,YAAY,iBACZC,UAAQ,IAEV,6CAEF,yBAAKhB,UAAU,QACZjB,EAAQkC,OACLlC,EAAQmC,KAAI,SAACC,EAAM7B,GACjB,OACE,oCACE,yBAAK8B,IAAK9B,EAAGU,UAAU,aACrB,iCAAOmB,GACP,4BACEE,QAAS,kBAAM9B,EAAOD,IACtBU,UAAU,kBAFZ,UAOA,4BAAQqB,QAAS,kBAAMpC,EAAWK,IAAIU,UAAU,WAAhD,WAIF,6BACE,0BACEC,SAAU,SAAAC,GAAC,OA9D/B,SAAoBA,EAAGhB,GAGrB,GAFAgB,EAAEC,iBACFzB,EAAO,IACHK,EAAQqB,QAAQ3B,IAAa,EAC/B,OAAO4B,MAAM,IAAD,OAAK5B,EAAL,wCAEZQ,EAAWC,GACXF,GAAQ,SAAAG,GAAQ,MACd,sBAAIA,GAAJ,CAAcV,IAAU6B,MAAK,SAACC,EAAGC,GAAJ,OAC3BD,EAAEE,cAAcD,EAAG,KAAM,CAAEE,YAAa,eAG5CnB,EAAOL,GAkDwBoC,CAAWpB,EAAGZ,IAC7BM,MAAO,CAAEJ,QAAS,QAClB+B,GAAI,SAAW5B,OAAOL,IAEtB,2BACEU,UAAU,mBACVW,KAAK,OACLC,MAAOnC,EACPoC,SAAU,SAAAX,GAAC,OAAIxB,EAAOwB,EAAEY,OAAOF,QAC/BG,YAAY,iBAEd,4BAAQf,UAAU,WAAlB,gBAMV,kBCnGQwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrC,SAASC,eAAe,SD6H3C,kBAAmBqC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e1be8180.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [modInput, setMod] = useState(\"\");\n  const [vocList, setList] = useState(\n    JSON.parse(localStorage.getItem(\"words\")) || []\n  );\n\n  useEffect(() => {\n    localStorage.setItem(\"words\", JSON.stringify(vocList));\n  }, [vocList]);\n\n  function addWord(e) {\n    e.preventDefault();\n    if (vocList.indexOf(input) >= 0) {\n      return alert(`\"${input}\" is already in the vocabulary list`);\n    } else {\n      setList(prevList =>\n        [...prevList, input].sort((a, b) =>\n          a.localeCompare(b, \"en\", { sensitivity: \"base\" })\n        )\n      );\n    }\n    setInput(\"\");\n  }\n\n  function deleteWord(index) {\n    setList(prevList => prevList.filter((_, i) => i != index));\n  }\n\n  function modifyWord(e, index) {\n    e.preventDefault();\n    setMod(\"\");\n    if (vocList.indexOf(modInput) >= 0) {\n      return alert(`\"${modInput}\" is already in the vocabulary list`);\n    } else {\n      deleteWord(index);\n      setList(prevList =>\n        [...prevList, modInput].sort((a, b) =>\n          a.localeCompare(b, \"en\", { sensitivity: \"base\" })\n        )\n      );\n      toggle(index);\n    }\n  }\n\n  function toggle(index) {\n    let display = document.getElementById(\"modify\" + String(index)).style\n      .display;\n    if (display == \"none\") {\n      document.getElementById(\"modify\" + String(index)).style.display = \"block\";\n    } else if (display == \"block\") {\n      document.getElementById(\"modify\" + String(index)).style.display = \"none\";\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"app-header\">\n        <h1>Aurore English Vocabulary App</h1>\n      </header>\n      <form onSubmit={addWord} className=\"add-form\">\n        <input\n          className=\"add-btn\"\n          type=\"text\"\n          value={input}\n          onChange={e => setInput(e.target.value)}\n          placeholder=\"Type word here\"\n          required\n        />\n        <button>Add Word</button>\n      </form>\n      <div className=\"list\">\n        {vocList.length\n          ? vocList.map((word, i) => {\n              return (\n                <>\n                  <div key={i} className=\"list-item\">\n                    <h2>- {word}</h2>\n                    <button\n                      onClick={() => toggle(i)}\n                      className=\"toggle-mod-btn\"\n                    >\n                      Modify\n                    </button>\n\n                    <button onClick={() => deleteWord(i)} className=\"del-btn\">\n                      Delete\n                    </button>\n                  </div>\n                  <div>\n                    <form\n                      onSubmit={e => modifyWord(e, i)}\n                      style={{ display: \"none\" }}\n                      id={\"modify\" + String(i)}\n                    >\n                      <input\n                        className=\"toggle-mod-input\"\n                        type=\"text\"\n                        value={modInput}\n                        onChange={e => setMod(e.target.value)}\n                        placeholder=\"Modify vocab\"\n                      />\n                      <button className=\"mod-btn\">Submit</button>\n                    </form>\n                  </div>\n                </>\n              );\n            })\n          : \"no vocab yet\"}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}